version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: whisper-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-whisper123}
    networks:
      - whisper-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:16-alpine
    container_name: whisper-postgres
    environment:
      POSTGRES_DB: whisper_live
      POSTGRES_USER: ${DB_USER:-whisper}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-whisper123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - whisper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whisper"]
      interval: 10s
      timeout: 5s
      retries: 5

  whisper-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.production
      args:
        - WHISPER_MODEL=${WHISPER_MODEL:-base}
    container_name: whisper-server
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${DB_USER:-whisper}:${DB_PASSWORD:-whisper123}@postgres:5432/whisper_live
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-whisper123}
    ports:
      - "${SERVER_PORT:-9090}:9090"
      - "${METRICS_PORT:-8000}:8000"
    volumes:
      - ./models:/models
      - ./logs:/logs
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - whisper-network
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-4}'
          memory: ${MEMORY_LIMIT:-4G}
        reservations:
          cpus: '${CPU_RESERVATION:-2}'
          memory: ${MEMORY_RESERVATION:-2G}
          devices:
            - driver: nvidia
              count: ${GPU_COUNT:-0}
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  nginx:
    image: nginx:alpine
    container_name: whisper-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      - whisper-server
    networks:
      - whisper-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    container_name: whisper-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9091:9090"
    networks:
      - whisper-network

  grafana:
    image: grafana/grafana:latest
    container_name: whisper-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana_data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - whisper-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: whisper-jaeger
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - whisper-network

networks:
  whisper-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: